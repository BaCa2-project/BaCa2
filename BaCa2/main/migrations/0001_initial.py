# Generated by Django 5.0.4 on 2024-04-22 18:40

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False,
                                           verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='course name')),
                ('short_name',
                 models.CharField(max_length=40, unique=True, verbose_name='course short name')),
                ('USOS_course_code', models.CharField(blank=True, max_length=20, null=True,
                                                      verbose_name='Subject code')),
                ('USOS_term_code',
                 models.CharField(blank=True, max_length=20, null=True, verbose_name='Term code')),
            ],
            options={
                'permissions': [('view_course_member', 'Can view course members'),
                                ('add_course_member', 'Can add course members'),
                                ('remove_course_member', 'Can remove course members'),
                                ('change_course_member_role', "Can change course member's role"),
                                ('add_course_admin', 'Can add course admins'),
                                ('add_course_members_csv', 'Can add course members from CSV'),
                                ('view_course_role', 'Can view course role'),
                                ('edit_course_role', 'Can edit course role'),
                                ('add_course_role', 'Can add course role'),
                                ('delete_course_role', 'Can delete course role'),
                                ('view_own_submit', 'Can view own submits'), (
                                    'add_submit_after_deadline',
                                    'Can add submit after round deadline'),
                                ('add_submit_before_start', 'Can add submit before round start'),
                                ('view_own_result', 'Can view own results'),
                                ('reupload_task', 'Can reupload task'),
                                ('rejudge_task', 'Can rejudge task')],
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False,
                                           verbose_name='ID')),
                (
                    'theme',
                    models.CharField(default='dark', max_length=255, verbose_name='UI theme')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False,
                                           verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='role name')),
                ('description',
                 models.TextField(blank=True, null=True, verbose_name='role description')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                             related_name='role_set', to='main.course',
                                             verbose_name='course')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission',
                                                       verbose_name='role permissions')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='admin_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+',
                                    to='main.role', verbose_name='admin role'),
        ),
        migrations.AddField(
            model_name='course',
            name='default_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='+',
                                    to='main.role', verbose_name='default role'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False,
                                           verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login',
                 models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email',
                 models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name',
                 models.CharField(blank=True, max_length=255, verbose_name='first name')),
                ('last_name',
                 models.CharField(blank=True, max_length=255, verbose_name='last name')),
                ('date_joined', models.DateField(auto_now_add=True, verbose_name='date joined')),
                ('usos_id', models.BigIntegerField(blank=True, null=True, verbose_name='USOS id')),
                ('user_job', models.CharField(
                    choices=[('ST', 'Student'), ('DC', 'Doctoral'), ('EM', 'Employee'),
                             ('AD', 'Admin')], default='ST', max_length=2,
                    verbose_name='user job')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('nickname',
                 models.CharField(blank=True, max_length=255, null=True, verbose_name='nickname')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set',
                                                  related_query_name='user', to='auth.group',
                                                  verbose_name='groups')),
                ('user_permissions',
                 models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                        related_name='user_set', related_query_name='user',
                                        to='auth.permission', verbose_name='user permissions')),
                ('roles', models.ManyToManyField(blank=True,
                                                 help_text='The course roles this user has been assigned to.',
                                                 related_name='user_set', related_query_name='user',
                                                 to='main.role', verbose_name='roles')),
                ('user_settings', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT,
                                                       to='main.settings',
                                                       verbose_name='user settings')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RolePreset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False,
                                           verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='preset name')),
                ('public', models.BooleanField(default=True,
                                               help_text='Indicates whether the preset is public. Public presets can be used by all users, private presets can only be used by their creator or other users given access.',
                                               verbose_name='preset is public')),
                ('creator', models.ForeignKey(blank=True, null=True,
                                              on_delete=django.db.models.deletion.CASCADE,
                                              related_name='created_role_presets',
                                              to=settings.AUTH_USER_MODEL,
                                              verbose_name='preset creator')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission',
                                                       verbose_name='preset permissions')),
            ],
        ),
        migrations.CreateModel(
            name='RolePresetUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False,
                                           verbose_name='ID')),
                ('preset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                             related_name='role_preset_users', to='main.rolepreset',
                                             verbose_name='preset')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='User_role_presets',
                                           to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
    ]
